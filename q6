#include <iostream>
using namespace std;

int main() {
    int rows, cols;
    cout << "Enter rows and cols: ";
    cin >> rows >> cols;

    int A[10][10];
    cout << "Enter matrix elements:\n";
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            cin >> A[i][j];
        }
    }

    // Count non-zeros
    int count = 0;
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            if (A[i][j] != 0) count++;
        }
    }

    // Sparse matrix storage: [count+1][3]
    int sparse[20][3];
    sparse[0][0] = rows;
    sparse[0][1] = cols;
    sparse[0][2] = count;

    int k = 1;
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            if (A[i][j] != 0) {
                sparse[k][0] = i;
                sparse[k][1] = j;
                sparse[k][2] = A[i][j];
                k++;
            }
        }
    }

    cout << "\nSparse Matrix (3-tuple form):\n";
    for (int i = 0; i <= count; i++) {
        cout << sparse[i][0] << " " << sparse[i][1] << " " << sparse[i][2] << endl;
    }

    // Transpose: swap rows and cols
    int transpose[20][3];
    transpose[0][0] = sparse[0][1];  // new rows = old cols
    transpose[0][1] = sparse[0][0];  // new cols = old rows
    transpose[0][2] = sparse[0][2];  // nnz same

    for (int i = 1; i <= count; i++) {
        transpose[i][0] = sparse[i][1];  // swap row and col
        transpose[i][1] = sparse[i][0];
        transpose[i][2] = sparse[i][2];
    }

    cout << "\nTranspose of Sparse Matrix:\n";
    for (int i = 0; i <= count; i++) {
        cout << transpose[i][0] << " " << transpose[i][1] << " " << transpose[i][2] << endl;
    }

    return 0;
}
